{
    "name": "Thelia\\Condition\\Operators",
    "line": 24,
    "short_desc": "Represent available Operations in condition checking",
    "long_desc": "",
    "hint": null,
    "tags": {
        "package": [
            [
                "Constraint"
            ]
        ],
        "author": [
            [
                "Guillaume",
                "MOREL",
                "<gmorel@openstudio.fr>"
            ]
        ]
    },
    "namespace": "Thelia\\Condition",
    "file": "\/home\/manu\/dev\/www\/thelia_main\/core\/lib\/Thelia\/Condition\/Operators.php",
    "hash": "a607aaf4608b072b9ada09045dddc7adef1dd2d6",
    "parent": null,
    "modifiers": 16,
    "is_trait": false,
    "is_interface": false,
    "aliases": {
        "Translator": "Thelia\\Core\\Translation\\Translator"
    },
    "errors": [

    ],
    "interfaces": [

    ],
    "properties": [

    ],
    "methods": {
        "getI18n": {
            "name": "getI18n",
            "line": 51,
            "short_desc": "Get operator translation",
            "long_desc": "",
            "hint": [
                [
                    "string",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [

            ],
            "modifiers": "9",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": {
                "translator": {
                    "name": "translator",
                    "line": 51,
                    "short_desc": "Provide necessary value from Thelia",
                    "long_desc": null,
                    "hint": [
                        [
                            "Thelia\\Core\\Translation\\Translator",
                            false
                        ]
                    ],
                    "tags": [

                    ],
                    "modifiers": "Translator",
                    "default": null,
                    "is_by_ref": false
                },
                "operator": {
                    "name": "operator",
                    "line": 51,
                    "short_desc": "Operator const",
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [

                    ],
                    "modifiers": "",
                    "default": null,
                    "is_by_ref": false
                }
            }
        }
    },
    "constants": {
        "INFERIOR": {
            "name": "INFERIOR",
            "line": 27,
            "short_desc": "Param1 is inferior to Param2",
            "long_desc": ""
        },
        "INFERIOR_OR_EQUAL": {
            "name": "INFERIOR_OR_EQUAL",
            "line": 29,
            "short_desc": "Param1 is inferior to Param2",
            "long_desc": ""
        },
        "EQUAL": {
            "name": "EQUAL",
            "line": 31,
            "short_desc": "Param1 is equal to Param2",
            "long_desc": ""
        },
        "SUPERIOR_OR_EQUAL": {
            "name": "SUPERIOR_OR_EQUAL",
            "line": 33,
            "short_desc": "Param1 is superior to Param2",
            "long_desc": ""
        },
        "SUPERIOR": {
            "name": "SUPERIOR",
            "line": 35,
            "short_desc": "Param1 is superior to Param2",
            "long_desc": ""
        },
        "DIFFERENT": {
            "name": "DIFFERENT",
            "line": 37,
            "short_desc": "Param1 is different to Param2",
            "long_desc": ""
        },
        "IN": {
            "name": "IN",
            "line": 39,
            "short_desc": "Param1 is in Param2",
            "long_desc": ""
        },
        "OUT": {
            "name": "OUT",
            "line": 41,
            "short_desc": "Param1 is not in Param2",
            "long_desc": ""
        }
    }
}