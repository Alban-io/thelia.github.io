{
    "name": "Thelia\\Core\\FileFormat\\Archive\\ArchiveBuilder\\TarGzArchiveBuilder",
    "line": 20,
    "short_desc": "Class TarGzArchiveBuilder",
    "long_desc": "",
    "hint": null,
    "tags": {
        "package": [
            [
                "Thelia\\Core\\FileFormat\\Archive\\ArchiveBuilder"
            ]
        ],
        "author": [
            [
                "Benjamin",
                "Perche",
                "<bperche@openstudio.fr>"
            ]
        ]
    },
    "namespace": "Thelia\\Core\\FileFormat\\Archive\\ArchiveBuilder",
    "file": "\/home\/manu\/dev\/www\/thelia_main\/core\/lib\/Thelia\/Core\/FileFormat\/Archive\/ArchiveBuilder\/TarGzArchiveBuilder.php",
    "hash": "91bf12fdfab54a72e88a5f3f964b55eea46a9825",
    "parent": "Thelia\\Core\\FileFormat\\Archive\\ArchiveBuilder\\TarArchiveBuilder",
    "modifiers": 0,
    "is_trait": false,
    "is_interface": false,
    "aliases": [

    ],
    "errors": [

    ],
    "interfaces": [

    ],
    "properties": [

    ],
    "methods": {
        "getName": {
            "name": "getName",
            "line": 22,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "string",
                    false
                ]
            ],
            "hint_desc": "This method must return a string, the name of the format. example: return \"XML\";",
            "tags": [

            ],
            "modifiers": "1",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": [

            ]
        },
        "getMimeType": {
            "name": "getMimeType",
            "line": 27,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "string",
                    false
                ]
            ],
            "hint_desc": "This method must return a string, the mime type of the file format. example: return \"application\/json\";",
            "tags": [

            ],
            "modifiers": "1",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": [

            ]
        },
        "getExtension": {
            "name": "getExtension",
            "line": 32,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "string",
                    false
                ]
            ],
            "hint_desc": "This method must return a string, the extension of the file format, without the \".\". The string should be lowercase. example: return \"xml\";",
            "tags": [

            ],
            "modifiers": "1",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": [

            ]
        },
        "isAvailable": {
            "name": "isAvailable",
            "line": 48,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "Returns conditions for archive builder to be available ( loaded libraries )",
            "tags": [

            ],
            "modifiers": "1",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": [

            ]
        }
    },
    "constants": [

    ]
}