{
    "name": "Thelia\\Core\\EventListener\\ErrorListener",
    "line": 31,
    "short_desc": "Class ErrorListener",
    "long_desc": "",
    "hint": null,
    "tags": {
        "package": [
            [
                "Thelia\\Core\\EventListener"
            ]
        ],
        "author": [
            [
                "Benjamin",
                "Perche",
                "<bperche@openstudio.fr>"
            ]
        ]
    },
    "namespace": "Thelia\\Core\\EventListener",
    "file": "\/home\/manu\/dev\/www\/thelia_main\/core\/lib\/Thelia\/Core\/EventListener\/ErrorListener.php",
    "hash": "6eafe4688b9ba64b7705d1482c01d1695c69d745",
    "parent": null,
    "modifiers": 0,
    "is_trait": false,
    "is_interface": false,
    "aliases": {
        "EventSubscriberInterface": "Symfony\\Component\\EventDispatcher\\EventSubscriberInterface",
        "GetResponseForExceptionEvent": "Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent",
        "KernelEvents": "Symfony\\Component\\HttpKernel\\KernelEvents",
        "TheliaEvents": "Thelia\\Core\\Event\\TheliaEvents",
        "Response": "Thelia\\Core\\HttpFoundation\\Response",
        "SecurityContext": "Thelia\\Core\\Security\\SecurityContext",
        "ParserInterface": "Thelia\\Core\\Template\\ParserInterface",
        "TemplateHelper": "Thelia\\Core\\Template\\TemplateHelper",
        "TheliaKernelEvents": "Thelia\\Core\\TheliaKernelEvents",
        "ConfigQuery": "Thelia\\Model\\ConfigQuery"
    },
    "errors": [

    ],
    "interfaces": {
        "Symfony\\Component\\EventDispatcher\\EventSubscriberInterface": "Symfony\\Component\\EventDispatcher\\EventSubscriberInterface"
    },
    "properties": [

    ],
    "methods": {
        "__construct": {
            "name": "__construct",
            "line": 45,
            "short_desc": "",
            "long_desc": "",
            "hint": null,
            "hint_desc": null,
            "tags": [

            ],
            "modifiers": "1",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": {
                "env": {
                    "name": "env",
                    "line": 45,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": null,
                    "tags": [

                    ],
                    "modifiers": "",
                    "default": null,
                    "is_by_ref": false
                },
                "parser": {
                    "name": "parser",
                    "line": 45,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "Thelia\\Core\\Template\\ParserInterface",
                            false
                        ]
                    ],
                    "tags": [

                    ],
                    "modifiers": "ParserInterface",
                    "default": null,
                    "is_by_ref": false
                },
                "securityContext": {
                    "name": "securityContext",
                    "line": 45,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "Thelia\\Core\\Security\\SecurityContext",
                            false
                        ]
                    ],
                    "tags": [

                    ],
                    "modifiers": "SecurityContext",
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "defaultErrorFallback": {
            "name": "defaultErrorFallback",
            "line": 54,
            "short_desc": "",
            "long_desc": "",
            "hint": null,
            "hint_desc": null,
            "tags": [

            ],
            "modifiers": "1",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": {
                "event": {
                    "name": "event",
                    "line": 54,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent",
                            false
                        ]
                    ],
                    "tags": [

                    ],
                    "modifiers": "GetResponseForExceptionEvent",
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "handleException": {
            "name": "handleException",
            "line": 73,
            "short_desc": "",
            "long_desc": "",
            "hint": null,
            "hint_desc": null,
            "tags": [

            ],
            "modifiers": "1",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": {
                "event": {
                    "name": "event",
                    "line": 73,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "Symfony\\Component\\HttpKernel\\Event\\GetResponseForExceptionEvent",
                            false
                        ]
                    ],
                    "tags": [

                    ],
                    "modifiers": "GetResponseForExceptionEvent",
                    "default": null,
                    "is_by_ref": false
                }
            }
        },
        "getSubscribedEvents": {
            "name": "getSubscribedEvents",
            "line": 105,
            "short_desc": "Returns an array of event names this subscriber wants to listen to.",
            "long_desc": "The array keys are event names and the value can be:\n\n * The method name to call (priority defaults to 0)\n * An array composed of the method name to call and the priority\n * An array of arrays composed of the method names to call and respective\n   priorities, or 0 if unset\n\nFor instance:\n\n * array('eventName' => 'methodName')\n * array('eventName' => array('methodName', $priority))\n * array('eventName' => array(array('methodName1', $priority), array('methodName2'))",
            "hint": [
                [
                    "array",
                    false
                ]
            ],
            "hint_desc": "The event names to listen to",
            "tags": {
                "api": [
                    [
                        ""
                    ]
                ]
            },
            "modifiers": "9",
            "is_by_ref": "",
            "exceptions": [

            ],
            "errors": [

            ],
            "parameters": [

            ]
        }
    },
    "constants": [

    ]
}